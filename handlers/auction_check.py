import asyncio
from datetime import datetime, timezone
from db import tracked_items, processed_lots, users_collection
from config import API_BASE_URL, CLIENT_ID, CLIENT_SECRET, AUTH_URL
import httpx

REQUESTS_PER_MIN = 190  # —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è –ª–∏–º–∏—Ç–∞
TRACK_WINDOW_MINUTES = 10  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ø–æ —Ç–≤–æ–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫ API
class StalcraftAuth:
    _token = None
    _token_created = None
    _token_lifetime = 3600  # —Å–µ–∫—É–Ω–¥

    @classmethod
    async def get_token(cls):
        now = datetime.utcnow().timestamp()
        if (
            cls._token
            and cls._token_created
            and now - cls._token_created < cls._token_lifetime - 60
        ):
            return cls._token
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.post(
                AUTH_URL,
                data={
                    "grant_type": "client_credentials",
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET,
                },
            )
            resp.raise_for_status()
            data = resp.json()
            cls._token = data["access_token"]
            cls._token_created = now
            return cls._token


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def check_auction_items(application):
    request_count = 0
    start_time = datetime.utcnow().timestamp()
    print("[INFO] Auction monitoring started")
    while True:
        all_items = list(tracked_items.find({"notify": True}))
        if not all_items:
            await asyncio.sleep(10)
            continue

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ item_id
        items_by_id = {}
        for item in all_items:
            items_by_id.setdefault(item["item_id"], []).append(item)

        for item_id, items in items_by_id.items():
            # API limit control
            if request_count >= REQUESTS_PER_MIN:
                elapsed = datetime.utcnow().timestamp() - start_time
                if elapsed < 60:
                    await asyncio.sleep(60 - elapsed)
                request_count = 0
                start_time = datetime.utcnow().timestamp()
            try:
                token = await StalcraftAuth.get_token()
                headers = {"Authorization": f"Bearer {token}"}
                params = {"additional": "true"}
                async with httpx.AsyncClient(timeout=20) as client:
                    url = f"{API_BASE_URL}/ru/auction/{item_id}/lots"
                    resp = await client.get(url, headers=headers, params=params)
                    resp.raise_for_status()
                    data = resp.json()
                lots = data.get("lots", [])
                await process_auction_data(application, items, lots)
                request_count += 1
            except Exception as e:
                print(f"[ERROR] Auction check failed for item_id={item_id}: {e}")
                await asyncio.sleep(2)
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Ä–µ–≥—É–ª–∏—Ä—É–π –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É)


async def process_auction_data(application, tracked_items_for_id, lots):
    now = datetime.now(timezone.utc)
    for lot in lots:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
        if not all(k in lot for k in ("itemId", "amount", "startPrice", "endTime")):
            continue
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–∞
        try:
            end_time = datetime.fromisoformat(lot["endTime"].replace("Z", "+00:00"))
        except Exception:
            continue
        remaining_minutes = (end_time - now).total_seconds() / 60
        if remaining_minutes <= 0:
            continue
        # –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        if processed_lots.find_one(
            {
                "item_id": lot["itemId"],
                "start_time": lot.get("startTime"),
                "end_time": lot["endTime"],
            }
        ):
            continue

        # –í—ã–±–æ—Ä —Ü–µ–Ω—ã: buyout –∏–ª–∏ —Å—Ç–∞–≤–∫–∞
        if (
            lot.get("itemId") == "y5k0"
        ):  # –≤–º–µ—Å—Ç–æ y5k0 —É–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π ID –∏–ª–∏ —É–±–µ—Ä–∏ —É—Å–ª–æ–≤–∏–µ –≤–æ–æ–±—â–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            import json

            with open("debug_lot.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(lot, ensure_ascii=False, indent=2))
                f.write("\n" + "=" * 40 + "\n")

        price_type = None
        if remaining_minutes > TRACK_WINDOW_MINUTES and lot.get("buyoutPrice", 0) > 0:
            total_price = lot["buyoutPrice"]
            price_per_unit = total_price / lot["amount"]
            price_type = "buyout"
        else:
            price_type = "bid"
            total_price = lot.get("currentPrice", 0) or lot["startPrice"]
            price_per_unit = total_price / lot["amount"]

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        for filter_ in tracked_items_for_id:
            # –ü—Ä–æ–ø—É—Å–∫ –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            user = users_collection.find_one({"user_id": filter_["user_id"]})
            if not user:
                continue
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è (—Ä–µ–∞–ª–∏–∑—É–π –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã, –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤):
            if filter_["type"] == "item":
                # –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: –ø–æ —Ü–µ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                if filter_["type"] == "item":
                    if (
                        price_per_unit > filter_["price"]
                        or lot["amount"] < filter_["min_count"]
                    ):
                        continue
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            else:
                # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:
                if filter_["type"] == "artifact":
                    add = lot.get("additional", {})
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
                    if "qlt" not in add or add["qlt"] != filter_["rarity"]:
                        continue
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
                    if (
                        filter_.get("min_percent") is not None
                        and filter_.get("max_percent") is not None
                    ):
                        ptn = add.get("ptn")
                        if ptn is None:
                            continue  # –í –ª–æ—Ç–µ –Ω–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        if not (
                            filter_["min_percent"] <= ptn <= filter_["max_percent"]
                        ):
                            continue  # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ (buyout –∏–ª–∏ —Å—Ç–∞–≤–∫–∞) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—ã—á–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
                    if price_per_unit > filter_["price"]:
                        continue
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

            # –í—Å—ë –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await send_lot_notification(
                application,
                filter_,
                lot,
                price_type,
                price_per_unit,
                total_price,
                remaining_minutes,
            )
            processed_lots.insert_one(
                {
                    "item_id": lot["itemId"],
                    "start_time": lot.get("startTime"),
                    "end_time": lot["endTime"],
                    "notified_users": [filter_["user_id"]],
                    "created_at": datetime.now(timezone.utc),
                }
            )


async def send_lot_notification(
    application,
    filter_,
    lot,
    price_type,
    price_per_unit,
    total_price,
    remaining_minutes,
):
    try:
        amount = lot["amount"]
        total_price_str = f"{int(total_price):,}".replace(",", " ")
        price_per_unit_str = f"{round(price_per_unit, 2):,}".replace(",", " ")
        msg = ""
        # –ï—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        if filter_["type"] == "artifact":
            add = lot.get("additional", {})
            rarity_names = [
                "–û–±—ã—á–Ω—ã–π",
                "–ù–µ–æ–±—ã—á–Ω—ã–π",
                "–û—Å–æ–±—ã–π",
                "–†–µ–¥–∫–∏–π",
                "–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π",
                "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
            ]
            rarity_name = rarity_names[filter_.get("rarity", 0)]
            msg += (
                f"üåÄ –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {filter_['name']}\n"
                f"–†–µ–¥–∫–æ—Å—Ç—å: {rarity_name}\n"
                f"–¢–∏–ø —Ü–µ–Ω—ã: {'–í—ã–∫—É–ø' if price_type == 'buyout' else '–°—Ç–∞–≤–∫–∞'}\n"
                f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_str} —Ä—É–±\n"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –µ—Å—Ç—å
            if (
                filter_.get("min_percent") is not None
                and filter_.get("max_percent") is not None
                and "ptn" in add
            ):
                msg += f"–ü—Ä–æ—Ü–µ–Ω—Ç: {add['ptn']}%\n"
            msg += f"–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: {int(remaining_minutes)} –º–∏–Ω—É—Ç\n"
        # –û–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä
        else:
            msg += (
                f"üõí –ù–∞–π–¥–µ–Ω –≤—ã–≥–æ–¥–Ω—ã–π –ª–æ—Ç!\n"
                f"–¢–æ–≤–∞—Ä: {filter_['name']}\n"
                f"–¢–∏–ø —Ü–µ–Ω—ã: {'–í—ã–∫—É–ø' if price_type == 'buyout' else '–°—Ç–∞–≤–∫–∞'}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
                f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_str} —Ä—É–±\n"
            )
            if amount > 1:
                msg += f"–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç: {price_per_unit_str} —Ä—É–±\n"
            msg += f"–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: {int(remaining_minutes)} –º–∏–Ω—É—Ç\n"

        await application.bot.send_message(chat_id=filter_["user_id"], text=msg)
        print(f"[INFO] Notification sent to {filter_['user_id']}")
    except Exception as e:
        print(f"[ERROR] Failed to send notification: {e}")
