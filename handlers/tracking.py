# stalcraft_bot/handlers/tracking.py

from bson import ObjectId  # –∏–º–ø–æ—Ä—Ç —Å–≤–µ—Ä—Ö—É, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB _id
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from db import users_collection, tracked_items
from utils.decorators import require_auth
from services.search import load_item_by_name
from utils.validation import get_percent_range_by_rarity, get_rarity_by_percent_range
from datetime import datetime, timedelta

# conversation states –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
(
    CHOOSE_TYPE,
    ENTER_ITEM_NAME,
    SELECT_ITEM,
    SET_PRICE,
    SET_QUANTITY,
    CONFIRM_ITEM,
    SELECT_RARITY,
    ASK_TRACK_PERCENT,
    SET_MIN_PERCENT,
    SET_MAX_PERCENT,
) = range(10)

# conversation states –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
(
    EDIT_SELECT_FIELD,
    EDIT_SET_VALUE,
) = range(100, 102)


def get_handler():
    return ConversationHandler(
        entry_points=[
            CommandHandler("add", start_add),
            CommandHandler("list", show_list),
        ],
        states={
            CHOOSE_TYPE: [CallbackQueryHandler(type_chosen)],
            ENTER_ITEM_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_item_name)
            ],
            SELECT_ITEM: [CallbackQueryHandler(select_item)],
            SET_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_price)],
            SET_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_quantity)
            ],
            CONFIRM_ITEM: [
                CallbackQueryHandler(confirm_add, pattern="^confirm_add$"),
                CallbackQueryHandler(cancel_add, pattern="^cancel_add$"),
            ],
            SELECT_RARITY: [CallbackQueryHandler(select_rarity, pattern="^rarity_")],
            ASK_TRACK_PERCENT: [
                CallbackQueryHandler(
                    handle_track_percent_choice, pattern="^track_percent_"
                )
            ],
            SET_MIN_PERCENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_min_percent)
            ],
            SET_MAX_PERCENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_max_percent)
            ],
        },
        fallbacks=[],
    )


def get_edit_handler():
    print("[INIT] get_edit_handler active")
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_edit_item, pattern=r"^edit_[a-f0-9]{24}$")
        ],
        states={
            EDIT_SELECT_FIELD: [
                CallbackQueryHandler(
                    select_edit_field, pattern=r"^edit_(price|count|rarity|percent)$"
                )
            ],
            EDIT_SET_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_new_value),
                CallbackQueryHandler(set_new_value, pattern=r"^rarity_\d$"),
            ],
        },
        fallbacks=[],
        name="edit_handler",
        persistent=False,
        per_chat=True,
    )


@require_auth
async def start_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user = users_collection.find_one({"user_id": user_id})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if user["current_items"] >= user["max_items"]:
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {user['max_items']}."
        )
        return ConversationHandler.END

    # –í—ã–±–æ—Ä: –¢–æ–≤–∞—Ä –∏–ª–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç
    buttons = [
        [InlineKeyboardButton("üß± –¢–æ–≤–∞—Ä", callback_data="item")],
        [InlineKeyboardButton("üåÄ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç", callback_data="artifact")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç?", reply_markup=reply_markup
    )
    return CHOOSE_TYPE


async def type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "item":
        context.user_data["type"] = "item"
        await query.edit_message_text(
            "üß± –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
        )
        return ENTER_ITEM_NAME

    elif query.data == "artifact":
        context.user_data["type"] = "artifact"
        await query.edit_message_text(
            "üåÄ –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
        )
        return ENTER_ITEM_NAME  # –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —à–∞–≥

    else:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END


async def enter_item_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    search_type = context.user_data.get("type", "item")
    found = load_item_by_name(query, search_type)

    if not found:
        await update.message.reply_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        )
        return ENTER_ITEM_NAME

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    unique = {}
    for item in found:
        item_id = item["data"].get("id")
        if item_id not in unique:
            unique[item_id] = item

    filtered = list(unique.values())

    context.user_data["item_results"] = filtered
    buttons = [
        [InlineKeyboardButton(item["name"], callback_data=f"select_item_{i}")]
        for i, item in enumerate(filtered)
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    if context.user_data.get("type") == "artifact":
        caption = "üîç –ü–æ—Ö–æ–∂–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
    else:
        caption = "üîç –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã:"

    await update.message.reply_text(caption, reply_markup=reply_markup)
    return SELECT_ITEM


async def select_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.replace("select_item_", ""))
    item = context.user_data["item_results"][idx]
    context.user_data["selected_item"] = item

    if context.user_data.get("type") == "item":
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{item['name']}*\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä:",
            parse_mode="Markdown",
        )
        return SET_PRICE
    else:
        # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å
        buttons = [
            [InlineKeyboardButton("–û–±—ã—á–Ω—ã–π", callback_data="rarity_0")],
            [InlineKeyboardButton("–ù–µ–æ–±—ã—á–Ω—ã–π", callback_data="rarity_1")],
            [InlineKeyboardButton("–û—Å–æ–±—ã–π", callback_data="rarity_2")],
            [InlineKeyboardButton("–†–µ–¥–∫–∏–π", callback_data="rarity_3")],
            [InlineKeyboardButton("–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="rarity_4")],
            [InlineKeyboardButton("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", callback_data="rarity_5")],
        ]
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{item['name']}*\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
        return SELECT_RARITY


async def enter_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if not text.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö).")
        return SET_PRICE

    context.user_data["price"] = int(text)

    if context.user_data.get("type") == "item":
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
        )
        return SET_QUANTITY

    else:
        # –£ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ 1
        context.user_data["quantity"] = 1

        # –ì–æ—Ç–æ–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        item = context.user_data["selected_item"]
        price = context.user_data["price"]
        min_percent = context.user_data.get("min_percent")
        max_percent = context.user_data.get("max_percent")
        rarity = context.user_data["rarity"]

        text = (
            f"üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:\n\n"
            f"üîπ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: *{item['name']}*\n"
            f"‚ú® –†–µ–¥–∫–æ—Å—Ç—å: *{['–û–±—ã—á–Ω—ã–π','–ù–µ–æ–±—ã—á–Ω—ã–π','–û—Å–æ–±—ã–π','–†–µ–¥–∫–∏–π','–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π','–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'][rarity]}*\n"
            f"üí∞ –¶–µ–Ω–∞ –¥–æ: *{price}* —Ä—É–±.\n"
        )

        if min_percent is not None and max_percent is not None:
            text += f"üß™ –ü—Ä–æ—Ü–µ–Ω—Ç: *{min_percent}% ‚Äì {max_percent}%*\n"

        text += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?"

        await update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add"),
                    ]
                ]
            ),
        )
        return CONFIRM_ITEM


async def enter_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if not text.isdigit():
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)."
        )
        return SET_QUANTITY

    context.user_data["quantity"] = int(text)

    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    item = context.user_data["selected_item"]
    price = context.user_data["price"]
    quantity = context.user_data["quantity"]

    await update.message.reply_text(
        f"üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:\n\n"
        f"üîπ –¢–æ–≤–∞—Ä: *{item['name']}*\n"
        f"üí∞ –¶–µ–Ω–∞ –¥–æ: *{price}* —Ä—É–±.\n"
        f"üì¶ –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity}* —à—Ç.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add"),
                ]
            ]
        ),
    )
    return CONFIRM_ITEM


async def confirm_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_chat.id
    user_type = context.user_data.get("type")
    item = context.user_data["selected_item"]

    document = {
        "user_id": user_id,
        "type": user_type,
        "name": item["name"],
        "item_id": item["data"]["id"],
        "price": context.user_data["price"],
        "notify": True,
    }

    if user_type == "item":
        document["min_count"] = context.user_data["quantity"]
    else:
        document["min_count"] = 1
        document["rarity"] = context.user_data["rarity"]
        if context.user_data.get("min_percent") is not None:
            document["min_percent"] = context.user_data["min_percent"]
            document["max_percent"] = context.user_data["max_percent"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    tracked_items.insert_one(document)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    users_collection.update_one({"user_id": user_id}, {"$inc": {"current_items": 1}})

    if user_type == "item":
        success_text = "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!"
    else:
        success_text = "‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!"

    await query.edit_message_text(success_text)
    return ConversationHandler.END


async def cancel_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –µ—â—ë —Ä–∞–∑:"
    )
    return ENTER_ITEM_NAME


async def select_rarity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    rarity = int(query.data.replace("rarity_", ""))
    context.user_data["rarity"] = rarity

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    percent_ranges = {
        0: (0, 100),
        1: (100, 110),
        2: (110, 120),
        3: (120, 130),
        4: (130, 140),
        5: (140, 150),
    }

    context.user_data["percent_range"] = percent_ranges[rarity]

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º: –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç?
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="track_percent_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="track_percent_no"),
        ]
    ]
    await query.edit_message_text(
        f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∫–æ—Å—Ç—å: *{['–û–±—ã—á–Ω—ã–π','–ù–µ–æ–±—ã—á–Ω—ã–π','–û—Å–æ–±—ã–π','–†–µ–¥–∫–∏–π','–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π','–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'][rarity]}*\n\n"
        f"–•–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    return ASK_TRACK_PERCENT


async def handle_track_percent_choice(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()

    if query.data == "track_percent_yes":
        min_p, max_p = context.user_data["percent_range"]
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (–æ—Ç {min_p} –¥–æ {max_p}):"
        )
        return SET_MIN_PERCENT

    else:
        context.user_data["min_percent"] = None
        context.user_data["max_percent"] = None
        await query.edit_message_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:"
        )
        return SET_PRICE


async def set_min_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        value = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return SET_MIN_PERCENT

    min_p, max_p = context.user_data["percent_range"]
    if not (min_p <= value <= max_p):
        await update.message.reply_text(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç {min_p} –¥–æ {max_p}.")
        return SET_MIN_PERCENT

    context.user_data["min_percent"] = value
    await update.message.reply_text(
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç {value} –¥–æ {max_p}):"
    )
    return SET_MAX_PERCENT


async def set_max_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        value = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return SET_MAX_PERCENT

    min_p = context.user_data["min_percent"]
    _, max_p = context.user_data["percent_range"]

    if not (min_p <= value <= max_p):
        await update.message.reply_text(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç {min_p} –¥–æ {max_p}.")
        return SET_MAX_PERCENT

    context.user_data["max_percent"] = value
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:"
    )
    return SET_PRICE


@require_auth
async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user = users_collection.find_one({"user_id": user_id})
    items = list(tracked_items.find({"user_id": user_id}))

    if not items:
        await update.message.reply_text("üóÇÔ∏è –í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–æ—Ç–∞.")
        return

    text = f"üìã –í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ {user['current_items']} –∏–∑ {user['max_items']} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:\n\n"
    await update.message.reply_text(text)

    for i, item in enumerate(items):
        item_type = item["type"]
        name = item["name"]
        price = item["price"]
        notify = "üîî –í–∫–ª" if item["notify"] else "üîï –û—Ç–∫–ª"

        if item_type == "item":
            desc = (
                f"üì¶ –¢–æ–≤–∞—Ä: *{name}*\n"
                f"üí∞ –¶–µ–Ω–∞ –¥–æ: *{price}* —Ä—É–±\n"
                f"üî¢ –ú–∏–Ω. –∫–æ–ª-–≤–æ: *{item.get('min_count', 1)}*\n"
                f"{notify}"
            )
        else:
            rarity_names = [
                "–û–±—ã—á–Ω—ã–π",
                "–ù–µ–æ–±—ã—á–Ω—ã–π",
                "–û—Å–æ–±—ã–π",
                "–†–µ–¥–∫–∏–π",
                "–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π",
                "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
            ]
            desc = (
                f"üåÄ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: *{name}*\n"
                f"‚ú® –†–µ–¥–∫–æ—Å—Ç—å: *{rarity_names[item.get('rarity', 0)]}*\n"
                f"üí∞ –¶–µ–Ω–∞ –¥–æ: *{price}* —Ä—É–±\n"
            )
            if "min_percent" in item and "max_percent" in item:
                desc += f"üß™ %: *{item['min_percent']}‚Äì{item['max_percent']}*\n"
            desc += f"{notify}"

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ª–æ—Ç–æ–º
        buttons = [
            [
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{item['_id']}"),
                InlineKeyboardButton(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item['_id']}"
                ),
                InlineKeyboardButton(
                    "üîï –í—ã–∫–ª" if item["notify"] else "üîî –í–∫–ª",
                    callback_data=f"toggle_{item['_id']}",
                ),
            ]
        ]

        await update.message.reply_text(
            desc, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown"
        )


@require_auth
async def delete_tracked_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _id = query.data.replace("delete_", "")
    item = tracked_items.find_one({"_id": ObjectId(_id)})

    if not item:
        await query.edit_message_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    tracked_items.delete_one({"_id": ObjectId(_id)})
    users_collection.update_one(
        {"user_id": update.effective_chat.id}, {"$inc": {"current_items": -1}}
    )

    await query.edit_message_text("üóëÔ∏è –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    return ConversationHandler.END


@require_auth
async def toggle_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _id = query.data.replace("toggle_", "")
    item = tracked_items.find_one({"_id": ObjectId(_id)})

    if not item:
        await query.edit_message_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    new_notify = not item.get("notify", True)
    tracked_items.update_one({"_id": ObjectId(_id)}, {"$set": {"notify": new_notify}})

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_notify else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await query.edit_message_text(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}. –û–±–Ω–æ–≤–∏—Ç–µ /list.")
    return ConversationHandler.END


@require_auth
async def start_edit_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _id = query.data.replace("edit_", "")
    item = tracked_items.find_one({"_id": ObjectId(_id)})

    if not item:
        await query.edit_message_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    context.user_data["edit_item_id"] = _id
    context.user_data["edit_type"] = item["type"]

    # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    buttons = [[InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="edit_price")]]

    if item["type"] == "item":
        buttons.append([InlineKeyboardButton("üî¢ –ö–æ–ª-–≤–æ", callback_data="edit_count")])
    else:
        buttons.append(
            [InlineKeyboardButton("‚ú® –†–µ–¥–∫–æ—Å—Ç—å", callback_data="edit_rarity")]
        )
        if "min_percent" in item:
            buttons.append(
                [InlineKeyboardButton("üß™ –ü—Ä–æ—Ü–µ–Ω—Ç", callback_data="edit_percent")]
            )

    await query.edit_message_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(buttons)
    )
    return EDIT_SELECT_FIELD


async def select_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["edit_field"] = query.data.replace("edit_", "")
    print("[DEBUG] –í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ:", context.user_data["edit_field"])

    if query.data == "edit_rarity":
        buttons = [
            [InlineKeyboardButton("–û–±—ã—á–Ω—ã–π", callback_data="rarity_0")],
            [InlineKeyboardButton("–ù–µ–æ–±—ã—á–Ω—ã–π", callback_data="rarity_1")],
            [InlineKeyboardButton("–û—Å–æ–±—ã–π", callback_data="rarity_2")],
            [InlineKeyboardButton("–†–µ–¥–∫–∏–π", callback_data="rarity_3")],
            [InlineKeyboardButton("–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="rarity_4")],
            [InlineKeyboardButton("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", callback_data="rarity_5")],
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
        return EDIT_SET_VALUE

    elif query.data == "edit_percent":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 130-140):"
        )
        return EDIT_SET_VALUE

    elif query.data in ["edit_price", "edit_count"]:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        return EDIT_SET_VALUE

    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return EDIT_SET_VALUE


async def set_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item_id = context.user_data.get("edit_item_id")
    field = context.user_data.get("edit_field")

    if not item_id or not field:
        await (update.message or update.callback_query).reply_text(
            "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        return EDIT_SET_VALUE

    update_data = {}

    if update.message:
        value = update.message.text.strip()
    elif update.callback_query:
        await update.callback_query.answer()
        value = update.callback_query.data.replace("rarity_", "")
    else:
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã
    item = tracked_items.find_one({"_id": ObjectId(item_id)})

    if field == "price":
        if not value.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")
            return EDIT_SET_VALUE
        update_data["price"] = int(value)

    elif field == "count":
        if not value.isdigit():
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."
            )
            return EDIT_SET_VALUE
        update_data["min_count"] = int(value)

    elif field == "percent":
        try:
            min_p, max_p = map(int, value.replace(" ", "").split("-"))
            if min_p >= max_p:
                raise ValueError

            rarity = get_rarity_by_percent_range(min_p, max_p)
            if rarity is None:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏."
                )
                return EDIT_SET_VALUE

            update_data["min_percent"] = min_p
            update_data["max_percent"] = max_p

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
            if item["rarity"] != rarity:
                update_data["rarity"] = rarity

        except:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∫: 130-140")
            return EDIT_SET_VALUE

    elif field == "rarity":
        try:
            rarity_value = int(value)
            update_data["rarity"] = rarity_value

            if "min_percent" in item and "max_percent" in item:
                min_p = item["min_percent"]
                max_p = item["max_percent"]
                allowed_min, allowed_max = get_percent_range_by_rarity(rarity_value)

                if not (allowed_min <= min_p < max_p <= allowed_max):
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ
                    tracked_items.update_one(
                        {"_id": ObjectId(item_id)},
                        {"$unset": {"min_percent": "", "max_percent": ""}},
                    )
                    context.user_data["edit_field"] = "percent"
                    await (update.message or update.callback_query.message).reply_text(
                        f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–ø—Ä–∏–º–µ—Ä: {allowed_min}-{allowed_max})"
                    )
                    return EDIT_SET_VALUE

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏.")
            return EDIT_SET_VALUE

    else:
        await (update.message or update.callback_query.message).reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return ConversationHandler.END

    tracked_items.update_one({"_id": ObjectId(item_id)}, {"$set": update_data})
    await (update.message or update.callback_query.message).reply_text(
        "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
    )
    return ConversationHandler.END


@require_auth
async def remove_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="confirm_remove_all")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_remove_all")],
    ]
    await update.message.reply_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@require_auth
async def confirm_remove_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id = update.effective_user.id

    result = tracked_items.delete_many({"user_id": user_id})

    users_collection.update_one({"user_id": user_id}, {"$set": {"current_items": 0}})

    await update.callback_query.edit_message_text(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π."
    )


@require_auth
async def cancel_remove_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è. –í—Å—ë –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ –º–µ—Å—Ç–µ."
    )


@require_auth
async def not_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    result = tracked_items.update_many(
        {"user_id": user_id}, {"$set": {"notify": False}}
    )
    await update.message.reply_text(
        f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {result.modified_count} –ø–æ–∑–∏—Ü–∏–π."
    )


@require_auth
async def not_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    result = tracked_items.update_many({"user_id": user_id}, {"$set": {"notify": True}})
    await update.message.reply_text(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è {result.modified_count} –ø–æ–∑–∏—Ü–∏–π."
    )


@require_auth
async def sub_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users_collection.find_one({"user_id": user_id})

    if not user:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ.")
        return

    reg_date = user.get("reg_date")
    max_items = user.get("max_items", 0)
    current_items = user.get("current_items", 0)

    if isinstance(reg_date, str):
        reg_date = datetime.fromisoformat(reg_date)

    expire_date = reg_date + timedelta(days=30)
    expire_str = expire_date.strftime("%d.%m.%Y")

    await update.message.reply_text(
        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expire_str}\n"
        f"üéØ –õ–∏–º–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {current_items} / {max_items}"
    )
