from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from db import users_collection, tracked_items
from datetime import date, datetime, timedelta, time
import secrets
from utils.decorators import admin_required
from bson import ObjectId
from config import ADMIN_ID


# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_EMAIL, ASK_LIMIT = range(2)
ASK_USER_IDENTIFIER = range(1000, 1001)
ASK_USER_FOR_LIMIT_CHANGE, ASK_NEW_LIMIT = range(1001, 1003)
ASK_USER_TO_CLEAR_ITEMS = 106
ASK_USER_TO_REMOVE, CONFIRM_USER_REMOVAL = range(107, 109)


def get_handler():
    return ConversationHandler(
        entry_points=[
            CommandHandler("add_user", add_user_start),
            CommandHandler("user_list", user_list),
            CommandHandler("find_user", find_user_start),
            CommandHandler("change_limit", change_limit_start),
            CommandHandler("clear_user_items", clear_user_items_start),
            CommandHandler("remove_user", remove_user_start),
        ],
        states={
            ASK_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_email)
            ],
            ASK_LIMIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_limit)
            ],
            ASK_USER_IDENTIFIER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_user_identifier)
            ],
            ASK_USER_FOR_LIMIT_CHANGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_limit_user)
            ],
            ASK_NEW_LIMIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_limit)
            ],
            ASK_USER_TO_CLEAR_ITEMS: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, clear_user_items_process
                )
            ],
            ASK_USER_TO_REMOVE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, remove_user_lookup)
            ],
            CONFIRM_USER_REMOVAL: [
                CallbackQueryHandler(
                    confirm_user_removal, pattern="^confirm_remove_user$"
                ),
                CallbackQueryHandler(
                    cancel_user_removal, pattern="^cancel_remove_user$"
                ),
            ],
        },
        fallbacks=[],
    )


@admin_required
async def add_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ email (–ª–æ–≥–∏–Ω) –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return ASK_EMAIL


async def add_user_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_email"] = update.message.text.strip()
    await update.message.reply_text("üî¢ –£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:")
    return ASK_LIMIT


async def add_user_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        limit = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ASK_LIMIT

    email = context.user_data["new_email"]
    password = secrets.token_urlsafe(6)  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    reg_date = datetime.now()

    users_collection.insert_one(
        {
            "login": email,
            "password": password,
            "user_id": None,
            "is_admin": False,
            "max_items": limit,
            "current_items": 0,
            "reg_date": reg_date,
        }
    )

    await update.message.reply_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:\n"
        f"üìß –õ–æ–≥–∏–Ω: `{email}`\n"
        f"üîë –ü–∞—Ä–æ–ª—å: `{password}`\n"
        f"üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ —Å {reg_date.strftime('%d.%m.%Y')}",
        parse_mode="Markdown",
    )
    return ConversationHandler.END


@admin_required
async def user_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = list(users_collection.find())
    total = len(users)

    if total == 0:
        await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n\n"
    for i, user in enumerate(users, start=1):
        email = user.get("login", "‚Äî")
        current = user.get("current_items", 0)
        max_items = user.get("max_items", 0)
        reg_date = user.get("reg_date")
        if isinstance(reg_date, str):
            reg_date = datetime.fromisoformat(reg_date)
        date_str = reg_date.strftime("%d.%m.%Y") if reg_date else "‚Äî"

        msg += (
            f"{i}. üìß {email}\n"
            f"   üéØ –õ–∏–º–∏—Ç: {current} / {max_items}\n"
            f"   üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ —Å: {date_str}\n\n"
        )

    await update.message.reply_text(msg)


# –ö–æ–º–∞–Ω–¥–∞ /find_user
@admin_required
async def find_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return ASK_USER_IDENTIFIER


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
@admin_required
async def process_user_identifier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identifier = update.message.text.strip()

    query = {"$or": [{"login": identifier}, {"user_id": identifier}]}
    if identifier.isdigit():
        query["$or"].append({"user_id": int(identifier)})

    user = users_collection.find_one(query)

    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        login = user.get("login", "‚Äî")
        user_id = user.get("user_id", "‚Äî")
        current = user.get("current_items", 0)
        max_items = user.get("max_items", 0)
        reg_date = user.get("reg_date")
        date_str = reg_date.strftime("%d.%m.%Y") if reg_date else "‚Äî"

        await update.message.reply_text(
            f"üë§ –õ–æ–≥–∏–Ω: {login}\n"
            f"üì± Telegram ID: {user_id}\n"
            f"üìä –õ–∏–º–∏—Ç: {current} / {max_items}\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {date_str}"
        )

    return ConversationHandler.END


@admin_required
async def change_limit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÅ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return ASK_USER_FOR_LIMIT_CHANGE


@admin_required
async def process_limit_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identifier = update.message.text.strip()
    query = {"$or": [{"login": identifier}]}
    if identifier.isdigit():
        query["$or"].append({"user_id": int(identifier)})

    user = users_collection.find_one(query)

    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    context.user_data["edit_user_mongo_id"] = user["_id"]
    await update.message.reply_text(
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['login']}:"
    )
    return ASK_NEW_LIMIT


@admin_required
async def save_new_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_limit = int(update.message.text.strip())
        user_mongo_id = context.user_data.get("edit_user_mongo_id")

        if user_mongo_id is None:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
            return ConversationHandler.END

        result = users_collection.update_one(
            {"_id": ObjectId(user_mongo_id)},
            {"$set": {"max_items": new_limit}},
        )

        if result.modified_count > 0:
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_limit}.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω.")

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ASK_NEW_LIMIT

    return ConversationHandler.END


from bson import ObjectId
from db import tracked_items


@admin_required
async def clear_user_items_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üßπ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return ASK_USER_TO_CLEAR_ITEMS


@admin_required
async def clear_user_items_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identifier = update.message.text.strip()
    query = {"$or": [{"login": identifier}]}
    if identifier.isdigit():
        query["$or"].append({"user_id": int(identifier)})

    user = users_collection.find_one(query)

    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    user_id = user.get("user_id")
    result = tracked_items.delete_many({"user_id": user_id})

    # –û–±–Ω—É–ª—è–µ–º current_items
    users_collection.update_one({"_id": user["_id"]}, {"$set": {"current_items": 0}})

    await update.message.reply_text(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['login']}.\n"
        f"üîÅ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ 0 / {user.get('max_items', 0)}"
    )
    return ConversationHandler.END


@admin_required
async def remove_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üóë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )
    return ASK_USER_TO_REMOVE


@admin_required
async def remove_user_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identifier = update.message.text.strip()
    query = {"$or": [{"login": identifier}]}
    if identifier.isdigit():
        query["$or"].append({"user_id": int(identifier)})

    user = users_collection.find_one(query)

    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    context.user_data["delete_user_id"] = user["_id"]
    context.user_data["delete_user_login"] = user["login"]

    buttons = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_remove_user"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_remove_user"),
        ]
    ]
    await update.message.reply_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['login']} –∏ –≤—Å–µ –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    return CONFIRM_USER_REMOVAL


@admin_required
async def confirm_user_removal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    user_id = context.user_data.get("delete_user_id")
    login = context.user_data.get("delete_user_login")

    user = users_collection.find_one({"_id": user_id})
    if not user:
        await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª—ë–Ω.")
        return ConversationHandler.END

    # –£–¥–∞–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tracked_items.delete_many({"user_id": user.get("user_id")})
    users_collection.delete_one({"_id": user_id})

    await update.callback_query.edit_message_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
    )
    return ConversationHandler.END


@admin_required
async def cancel_user_removal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
    return ConversationHandler.END


async def check_expired_subscriptions(app):
    print("[DEBUG] RUN check_expired_subscriptions")
    today = datetime.combine(datetime.utcnow().date(), time.min)

    users = users_collection.find(
        {
            "reg_date": {"$exists": True},
            "$or": [
                {"pending_control_until": {"$exists": False}},
                {"pending_control_until": None},
                {"pending_control_until": {"$lt": today}},
            ],
        }
    )

    for user in users:
        login = user["login"]
        reg_date = user["reg_date"]

        if isinstance(reg_date, str):
            reg_date = datetime.fromisoformat(reg_date)
        elif isinstance(reg_date, date) and not isinstance(reg_date, datetime):
            reg_date = datetime.combine(reg_date, time.min)

        end_date = reg_date + timedelta(days=30)

        # üí° –ó–¥–µ—Å—å —É–∂–µ –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ ‚Äî –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å
        if (
            end_date.date() != today.date()
            and user.get("pending_control_until", today + timedelta(seconds=1)) > today
        ):
            continue

        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {login}")

        buttons = [
            [
                InlineKeyboardButton(
                    "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_sub:{login}"
                ),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_sub:{login}"),
                InlineKeyboardButton(
                    "üïì –ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ", callback_data=f"control_sub:{login}"
                ),
            ]
        ]

        await app.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{login}` –∏—Å—Ç–µ–∫–ª–∞ {end_date.strftime('%d.%m.%Y')}\n"
                f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"
            ),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown",
        )


# ===============================
# üîÅ –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
# ===============================
import asyncio


async def daily_subscription_check(app):
    while True:
        await check_expired_subscriptions(app)
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞


async def extend_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    login = update.callback_query.data.split(":")[1]

    users_collection.update_one(
        {"login": login},
        {"$set": {"reg_date": datetime.utcnow(), "pending_control_until": None}},
    )

    await update.callback_query.edit_message_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{login}` –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.",
        parse_mode="Markdown",
    )


async def remove_subscription_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    login = update.callback_query.data.split(":")[1]

    user = users_collection.find_one({"login": login})
    if user:
        tracked_items.delete_many({"user_id": user.get("user_id")})
        users_collection.delete_one({"_id": user["_id"]})

    await update.callback_query.edit_message_text(
        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{login}` —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown"
    )


async def put_subscription_on_control(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.callback_query.answer()
    login = update.callback_query.data.split(":")[1]

    users_collection.update_one(
        {"login": login},
        {
            "$set": {
                "pending_control_until": datetime.combine(
                    datetime.utcnow().date() + timedelta(days=5), time.min
                )
            }
        },
    )

    await update.callback_query.edit_message_text(
        f"üïì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{login}` –≤–∑—è—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π.",
        parse_mode="Markdown",
    )
